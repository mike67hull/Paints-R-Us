from tkinter import *


from tkinter import *
import tkinter.messagebox
import sqlite3
import time
import datetime

#Connecting to Paints-R-Us Database
connection = sqlite3.connect('PaintsRUs.db')
cursor = connection.cursor()

"""Main class/UI for software"""
class PaintsMain:
    g=0
    r=0
    currentPayment = 0
    currentEmployee = -1
    currentDept = -1
    currentCustomer = -1
    employeeName="blank"
    total=0
    """When program runs, this method is ran automatically, creating the login screen"""
    def __init__(self, master):

        """When submit button is clicked, Username and Password values are retrieved from 'PaintsRUs.db' to see if they
        exist, if they don't exist, an error window pops up, if they do, the global variable @currentEmployee and
        @currentDept are set to the corresponding values for later use. The login frame is then destroyed and the menu
        screen is called. For the sake of show, the username and password of this system is set as the first and last
        name of the employees."""
        def submit(event):
            time.sleep(.1)
            usernameValue = str(username.get())
            passwordValue = str(password.get())
            PaintsMain.employeeName=usernameValue
            cursor.execute('SELECT * FROM Employee WHERE Emp_Fname = "' + usernameValue + '" AND Emp_Lname = "' + passwordValue + '"')
            result = cursor.fetchall()
            if(str(result) == '[]'):#If user not found, error window appears
                tkinter.messagebox.showerror('Sign In Error', 'Incorrect Username or Password, Please try again')
            else:#If user found, the login frame is removed and the main frame is loaded
                PaintsMain.currentEmployee = int(result[0][0])
                PaintsMain.currentDept = int(result[0][7])
                time.sleep(.3)
                loginFrame.destroy()
                PaintsMain.menuScreen(master)

        """Below the login screen is being put together with all necessary labels and entries. @username stores the entry 
        for Username and @password stores the entry for the password."""
        loginFrame = Frame(master, width = 300, height = 200, bg="gray")
        loginFrame.pack(pady=25)
        loginFrame.pack_propagate(0)
        signLabel = Label(loginFrame, text="Welcome to Paints-R-Us, Please Sign In!", bg="gray")
        nameLabel = Label(loginFrame, text="Username", bg="gray")
        passLabel = Label(loginFrame, text="Password", bg="gray")
        username = StringVar()
        nameEntry = Entry(loginFrame, textvariable = username, bg="darkgray")
        password = StringVar()
        passEntry = Entry(loginFrame, textvariable = password, bg="darkgray")
        passEntry.config(show="*");
        loginButton = Button(loginFrame, text="Login")
        loginButton.bind("<Button-1>", submit)
        master.bind("<Return>", submit)
        signLabel.grid(row=0, columnspan = 2, pady=15)
        nameLabel.grid(row=1, sticky=E)
        passLabel.grid(row=2, sticky=E)
        nameEntry.grid(row=1, column=1)
        passEntry.grid(row=2, column=1)
        loginButton.grid(row=3, columnspan = 2, pady=12)

    """After a succesful login, the menu screen is called"""
    def menuScreen(master):

        """When go button is clicked, the value for which it possesses is accounted for and the appropriate screen is
        chosen. (ONLY MANAGERS CAN ACCESS "Create new employee" AND "Create custom query")"""
        def goToPage(event):
            currentGo = menuList.get(menuList.curselection())
            master.unbind("<Return>")
            if(str(currentGo)=="Lookup Customer"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.customerLookupScreen(master)
            elif(str(currentGo) == "Add New Customer"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.newCustomerScreen(master)
            elif(str(currentGo) == "Create Custom Query"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.customQueryScreen(master)
            elif (str(currentGo) == "Create New Order"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.newOrderScreen(master)
            elif (str(currentGo) == "Create New Employee"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.newEmployeeScreen(master)
            elif (str(currentGo) == "Lookup Invoice"):
                time.sleep(.3)
                menuFrame.destroy()
                PaintsMain.lookupInvoiceScreen(master)

        """Used in aid to determine whether employee is a manager, if so, user gets 6 choices, if not, user gets 4."""
        def size():
            if(PaintsMain.currentDept==3):
                return 6
            else:
                return 4

        """Below the menu screen is being put together with all necessary attributes. The list of screens is being 
            assembles based upon the department from which the user is from. If they are from the managerial department
            i.e 3, they get access to two extra screens."""
        master.unbind("<Escape>")
        menuFrame = Frame(master, width=300, height=200, bg="gray")
        menuFrame.pack(pady=10)
        menuFrame.pack_propagate(0)
        questionLabel = Label(menuFrame, text="What would you like to do " + str(PaintsMain.employeeName) + "?", bg="gray")
        menuList = Listbox(menuFrame, height=size(), bg="darkgray")
        menuList.insert(1, 'Lookup Customer')
        menuList.insert(2, 'Add New Customer')
        menuList.insert(3, 'Lookup Invoice')
        if(PaintsMain.currentCustomer!=-1):
            menuList.insert(4, 'Create New Order')
        if(PaintsMain.currentDept==3):
            #menuList.insert(5, 'Generate Report')
            menuList.insert(5, 'Create Custom Query')
            menuList.insert(6, 'Create New Employee')
        goButton = Button(menuFrame, text="Go To Screen")
        goButton.bind("<Button-1>", goToPage)
        master.bind("<Return>", goToPage)
        questionLabel.grid(row=0, columnspan = 2, pady=10)
        menuList.grid(rowspan=2, sticky=W)
        goButton.grid(row=2, column=1, padx=10, sticky=S)
        returnLabel = Label(menuFrame, text="Press 'Esc' key to return to this menu!",bg="gray")
        returnLabel.grid(row=3, columnspan=2, pady=5)

    """This screen allows the user to search for a customer in the database through id or first and last name. If the 
    customer is found, the user is taken to a succeeding screen and global variable @currentCustomer is set accordingly.
    if not, an error message pops up."""
    def customerLookupScreen(master):

        """Basic return mechanism when escape key is pressed"""
        def Return(event):
            time.sleep(.3)
            customerLookupFrame.destroy()
            PaintsMain.menuScreen(master)

        master.bind("<Escape>", Return)

        """When the search button is clicked, the values in the entry form are assigned and errors are checked. Default 
        search is by id, if no id is given then the first and last name is searched. If a customer is found the frame is
        destroyed and the user is taken to the customer info screen. If no customer is found and error message is displayed."""
        def searchCustomer(event):#ERROr PaintsMain.currentCustomer = int(result[0][0]) IndexError: list index out of range
            idValue = str(customerID.get())
            firstNameValue = str(firstName.get())
            lastNameValue = str(lastName.get())
            if (idValue == "" and (firstNameValue == "" or lastNameValue == "")):
                tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You must fill the required fields!')
            else:
                if(idValue != ""):
                    cursor.execute('SELECT * FROM Customer WHERE Cust_Code = "' + idValue + '"')# + '" AND Password = "' + passwordValue + '"')
                    result = cursor.fetchall()
                    if(str(result) == "[]"):
                        tkinter.messagebox.showerror('Incorrect ID','Attention, The ID you\'ve entered was not found!')
                    else:
                        time.sleep(.3)
                        PaintsMain.currentCustomer = str(result[0][0])
                        customerLookupFrame.destroy()
                        PaintsMain.customerInfoScreen(master)
                else:
                    cursor.execute('SELECT * FROM Customer WHERE Cust_Fname = "' + firstNameValue + '" AND Cust_Lname = "' + lastNameValue + '"')
                    result = cursor.fetchall()
                    PaintsMain.currentCustomer = str(result[0][0])
                    customerLookupFrame.destroy()
                    PaintsMain.customerInfoScreen(master)

        """Below the lookup frame is being assembled with all necessary parts. @customerID is used to hold the entered
        customer id, @firstName is used to hold the first name given, @lastName is used to hold the last name given."""
        customerLookupFrame = Frame(master, width=300, height=200, bg="gray")
        customerLookupFrame.pack(pady=5)
        customerLookupFrame.pack_propagate(0)
        lookupLabel = Label(customerLookupFrame, text="Lookup a customer by ID or by first and last name:", bg="gray")
        idLabel = Label(customerLookupFrame, text="Customer ID:", bg="gray")
        customerID = StringVar()
        idEntry = Entry(customerLookupFrame, textvariable=customerID, bg="darkgray")
        orLabel = Label(customerLookupFrame, text="-Or-", bg="gray")
        firstNameLabel = Label(customerLookupFrame, text="First Name:", bg="gray")
        lastNameLabel = Label(customerLookupFrame, text="Last Name:", bg="gray")
        firstName = StringVar()
        firstNameEntry = Entry(customerLookupFrame, textvariable=firstName, bg="darkgray")
        lastName = StringVar()
        lastNameEntry = Entry(customerLookupFrame, textvariable=lastName, bg="darkgray")
        searchButton = Button(customerLookupFrame, text="Search")
        searchButton.bind("<Button-1>", searchCustomer)
        master.bind("<Return>", searchCustomer)
        lookupLabel.grid(row=0,columnspan=2, pady=10)
        idLabel.grid(row=1, sticky=E)
        idEntry.grid(row=1, column=1)
        orLabel.grid(row=2, columnspan=2, padx=10, pady=10)
        firstNameLabel.grid(row=3, sticky=E)
        lastNameLabel.grid(row=4, sticky=E)
        firstNameEntry.grid(row=3, column=1)
        lastNameEntry.grid(row=4, column=1)
        searchButton.grid(row=5, columnspan=2, pady=10)

    """This screen allows the user to add a new customer to the system. If added, balance is set to zero by default and 
    global variable @currentCustomer is set accordingly."""
    def newCustomerScreen(master):

        """Basic return mechanism when escape key is pressed"""
        def Return(event):
            time.sleep(.3)
            newCustomerFrame.destroy()
            PaintsMain.menuScreen(master)

        master.bind("<Escape>", Return)

        """When the create button is clicked, the values are stored in variables and a query is executed. If a customer 
        with those credentials is found, an error is displayed, if not, the customer is added and the user istaken to 
        their info screen."""
        def newCustomer(event):
            newFirstNameValue = str(newFirstName.get())
            newLastNameValue = str(newLastName.get())
            newStreetValue = str(newStreet.get())
            newCityValue = str(newCity.get())
            newStateValue = str(newState.get())
            newZipValue = str(newZip.get())
            if (newFirstNameValue == "" or newLastNameValue == "" or newStreetValue == "" or newCityValue == "" or newStateValue == "" or newZipValue == ""):
                tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You must fill the required fields!')
            else:
                answer = tkinter.messagebox.askquestion('Click Yes to Proceed', 'Are you sure all of the information entered is correct?')
                if (answer == 'yes'):
                    cursor.execute('SELECT * FROM Customer WHERE Cust_Fname = "' + newFirstNameValue + '" AND Cust_Lname = "' + newLastNameValue + '" AND Cust_Street = "' + newStreetValue + '" AND Cust_City = "' + newCityValue + '" AND Cust_State = "' + newStateValue + '" AND Cust_ZIP = "' + newZipValue + '"')
                    result = cursor.fetchall()
                    if (str(result) != '[]'):
                        answer = tkinter.messagebox.askquestion('Existing Customer Error', 'The customer you tried to create is already existing. Go to their profile?')
                        if(answer == 'yes'):
                            time.sleep(.3)
                            PaintsMain.currentCustomer = result[0][0]
                            newCustomerFrame.destroy()
                            PaintsMain.customerInfoScreen(master)
                    else:
                        cursor.execute('INSERT INTO Customer (Cust_Code, Cust_Fname, Cust_Lname, Cust_Street, Cust_City, Cust_State, Cust_ZIP, Cust_Bal) VALUES ("' + newLastNameValue + '1", "' + newFirstNameValue + '", "' + newLastNameValue + '", "' + newStreetValue + '", "' + newCityValue + '", "' + newStateValue + '", "' + newZipValue + '", "0")')
                        connection.commit()
                        cursor.execute('SELECT * FROM Customer WHERE Cust_Fname = "' + newFirstNameValue + '" AND Cust_Lname = "' + newLastNameValue + '" AND Cust_Street = "' + newStreetValue + '" AND Cust_City = "' + newCityValue + '" AND Cust_State = "' + newStateValue + '" AND Cust_ZIP = "' + newZipValue + '"')
                        result = cursor.fetchall()
                        PaintsMain.currentCustomer = result[0][0]
                        time.sleep(.3)
                        newCustomerFrame.destroy()
                        PaintsMain.customerInfoScreen(master)

        """Below, the new customer screen is being assembled with all necessary components for the form. Each field has
        its own variable to store (First name, last name, Street, City, State, Zip)"""
        newCustomerFrame = Frame(master, width=300, height=200, bg="gray")
        newCustomerFrame.pack()
        newCustomerFrame.pack_propagate(0)
        newCustomerLabel = Label(newCustomerFrame, text="Enter credentials for the new customer:", bg="gray")
        newFirstNameLabel = Label(newCustomerFrame, text="First Name:", bg="gray")
        newLastNameLabel = Label(newCustomerFrame, text="Last Name:", bg="gray")
        newFirstName = StringVar()
        newFirstNameEntry = Entry(newCustomerFrame, textvariable=newFirstName, bg="darkgray")
        newLastName = StringVar()
        newLastNameEntry = Entry(newCustomerFrame, textvariable=newLastName, bg="darkgray")
        newStreetLabel = Label(newCustomerFrame, text="Street:", bg="gray")
        newCityLabel = Label(newCustomerFrame, text="City:", bg="gray")
        newStreet = StringVar()
        newStreetEntry = Entry(newCustomerFrame, textvariable=newStreet, bg="darkgray")
        newCity = StringVar()
        newCityEntry = Entry(newCustomerFrame, textvariable=newCity, bg="darkgray")
        newStateLabel = Label(newCustomerFrame, text="State:", bg="gray")
        newZipLabel = Label(newCustomerFrame, text="ZIP:", bg="gray")
        newState = StringVar()
        newStateEntry = Entry(newCustomerFrame, textvariable=newState, bg="darkgray")
        newZip = StringVar()
        newZipEntry = Entry(newCustomerFrame, textvariable=newZip, bg="darkgray")
        newCustomerButton = Button(newCustomerFrame, text="Create")
        newCustomerButton.bind("<Button-1>", newCustomer)
        master.bind("<Return>", newCustomer)
        newCustomerLabel.grid(row=0, columnspan=2, pady=5)
        newFirstNameLabel.grid(row=1, sticky=E)
        newLastNameLabel.grid(row=2, sticky=E)
        newFirstNameEntry.grid(row=1, column=1)
        newLastNameEntry.grid(row=2, column=1)
        newStreetLabel.grid(row=3, sticky=E)
        newCityLabel.grid(row=4, sticky=E)
        newStreetEntry.grid(row=3, column=1)
        newCityEntry.grid(row=4, column=1)
        newStateLabel.grid(row=5, sticky=E)
        newZipLabel.grid(row=6, sticky=E)
        newStateEntry.grid(row=5, column=1)
        newZipEntry.grid(row=6, column=1)
        newCustomerButton.grid(row=7, columnspan=2, pady=10)

    """This screen allows the user to view a customers credentials and also their balance. There is also a function
    to make a payment on their balance."""
    def customerInfoScreen(master):

        """Basic return mechanism when escape key is pressed"""
        def Return(event):
            time.sleep(.3)
            customerInfoFrame.destroy()
            paymentFrame.destroy()
            PaintsMain.menuScreen(master)

        master.bind("<Escape>", Return)

        """When the make payment button is pressed, the value from the field is stored in a variable. It is checkeed to 
        make sure that it is a number, and that it is <= the balance. If both conditions are met, the payment is then
        processed."""
        def makePayment(event):
            paymentAmount = payment.get()
            result = getResult()
            if (paymentAmount == ""):
                tkinter.messagebox.showerror('Blank Field(s) Error','Attention, You did not enter a payment amount!')
            elif (isNumber(paymentAmount) == False):
                tkinter.messagebox.showerror('Payment Error', 'Attention, The value you entered is not a number!')
            else:
                paymentAmount = float(paymentAmount)
                answer = tkinter.messagebox.askquestion('Click Yes to Proceed','Are you sure this payment amount is correct?')
                if (answer == 'yes'):
                    adjustBalance = float(result[0][7]) - paymentAmount
                    if (paymentAmount < .01):
                        tkinter.messagebox.showerror('Payment Error','Attention, The payment attempted was negative/zero!')
                    elif (adjustBalance < 0):
                        tkinter.messagebox.showerror('Payment Error','Attention, The payment attempted was more than the balance!')
                    else:
                        currentBalance.set("$" + str(round(adjustBalance, 2)))
                        cursor.execute('UPDATE Customer SET Cust_Bal = "' + str(adjustBalance) + '" WHERE Cust_Code = "' + str(PaintsMain.currentCustomer) + '"')
                        connection.commit()
                        result = getResult()
                        tkinter.messagebox.showinfo('Payment Success','Attention, The payment has succesfully been recorded!')

        """Queries the database for the customer it is currently going to display."""
        def getResult():
            cursor.execute('SELECT * FROM Customer WHERE Cust_Code = "' + str(PaintsMain.currentCustomer) + '"')
            return cursor.fetchall()

        """Determines whether the payment entry is actually a number"""
        def isNumber(n):
            try:
                float(n)
                return True
            except ValueError:
                return False

        """Below, the info frame is being assembled with all necessary fields resulting from the query done in either
        the lookup customer, or create customer screen."""
        customerInfoFrame = Frame(master, width=300, height=200, bg="gray")
        customerInfoFrame.pack(side=LEFT, padx=4)
        customerInfoFrame.pack_propagate(0)
        customerInfoLabel = Label(customerInfoFrame, text="Customer Profile:", bg="gray")
        result = getResult()
        cIdLabel = Label(customerInfoFrame, text="Customer ID: ", bg="gray")
        cId = Label(customerInfoFrame, text=str(result[0][0]), bg="gray")
        cFirstLabel = Label(customerInfoFrame, text="First Name: ", bg="gray")
        cFirst = Label(customerInfoFrame, text=str(result[0][1]), bg="gray")
        cLastLabel = Label(customerInfoFrame, text="Last Name: ", bg="gray")
        cLast= Label(customerInfoFrame, text=str(result[0][2]), bg="gray")
        cStreetLabel = Label(customerInfoFrame, text="Street: ", bg="gray")
        cStreet = Label(customerInfoFrame, text=str(result[0][3]), bg="gray")
        cCityLabel = Label(customerInfoFrame, text="City: ", bg="gray")
        cCity = Label(customerInfoFrame, text=str(result[0][4]), bg="gray")
        cStateLabel = Label(customerInfoFrame, text="State: ", bg="gray")
        cState = Label(customerInfoFrame, text=str(result[0][5]), bg="gray")
        cZipLabel = Label(customerInfoFrame, text="ZIP Code: ", bg="gray")
        cZip = Label(customerInfoFrame, text=str(result[0][6]), bg="gray")
        customerInfoLabel.grid(row=0, columnspan=2, pady=5)
        cIdLabel.grid(row=1, sticky=E)
        cId.grid(row=1, column=1, sticky=W)
        cFirstLabel.grid(row=2, sticky=E)
        cLastLabel.grid(row=3, sticky=E)
        cFirst.grid(row=2, column=1, sticky=W)
        cLast.grid(row=3, column=1, sticky=W)
        cStreetLabel.grid(row=4, sticky=E)
        cCityLabel.grid(row=5, sticky=E)
        cStreet.grid(row=4, column=1, sticky=W)
        cCity.grid(row=5, column=1, sticky=W)
        cStateLabel.grid(row=6, sticky=E)
        cZipLabel.grid(row=7, sticky=E)
        cState.grid(row=6, column=1, sticky=W)
        cZip.grid(row=7, column=1, sticky=W)

        """Below, the payment frame is being assembled with the necessary parts. This frame sits right next to the info
        frame on the screen. This gives balance and has an entry to make a payment."""
        paymentFrame = Frame(master, highlightbackground="red", highlightcolor="red", highlightthickness=1)
        paymentFrame.pack(side=RIGHT, padx=2)
        cBalanceLabel = Label(paymentFrame, text="Balance: ")
        currentBalance = StringVar()
        currentBalance.set("$" + str(result[0][7]))
        cBalance = Label(paymentFrame, textvariable=currentBalance)
        payment = StringVar()
        paymentEntry = Entry(paymentFrame, textvariable=payment, width=10, bg="darkgray")
        paymentDateLabel = Label(paymentFrame, text="Payment Date:")
        currentDate = datetime.datetime.today().strftime('%Y-%m-%d')
        paymentDate = Label(paymentFrame, text=str(currentDate))
        makePaymentButton = Button(paymentFrame, text="Make Payment", bg="gray")
        makePaymentButton.bind("<Button-1>", makePayment)
        master.bind("<Return>", makePayment)
        paymentLabel = Label(paymentFrame, text="Payment: ")
        cBalanceLabel.grid(row=0, sticky=W)
        cBalance.grid(row=1, sticky=E)
        paymentLabel.grid(row=2, sticky=W)
        paymentEntry.grid(row=3, sticky=E)
        paymentDateLabel.grid(row=4, sticky=W)
        paymentDate.grid(row=5, sticky=E)
        makePaymentButton.grid(row=6, padx=3, pady=15)

    """This screen allows for a manager to enter a custom query into the database and relays the results"""
    def customQueryScreen(master):
        """Basic return mechanism when escape key is pressed"""
        def Return(event):
            time.sleep(.3)
            customQueryFrame.destroy()
            PaintsMain.menuScreen(master)

        master.bind("<Escape>", Return)

        """When the submit query button is clicked, the query is taken from the field and is entered. If the query is a
        valid query, the results from it are shown in a popup window generated, if not, an error window appears."""
        def query(event):#NEED TO HANDLE ERROR WHEN ENTER KEY IS QUERYED
            enteredQuery = customQueryEntry.get("1.0", 'end-1c')
            if(enteredQuery == ""):
                tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You did not enter a query!')
            else:
                answer = tkinter.messagebox.askquestion('Click Yes to Proceed','Are you sure your query is correct?')
                if(answer == "yes"):
                    try:
                        cursor.execute(enteredQuery)
                        connection.commit()
                        tkinter.messagebox.showinfo('Query Success','Attention, The query has succesfully been entered!')
                        test = cursor.fetchall()
                        pList = cursor.execute(enteredQuery)
                        if(str(test) != "[]"):
                            resultQuery = Tk()
                            resultQuery.geometry("500x300")
                            resultQueryFrame = Frame(resultQuery, bg="gray")
                            resultQueryFrame.pack(fill=BOTH, expand=YES)
                            queryList = Listbox(resultQueryFrame, bg="darkgray")
                            queryList.pack(fill=BOTH, expand=YES, padx=5, pady=5)
                            i = 0
                            pList.__sizeof__()
                            while i < pList.__sizeof__():
                                queryList.insert(int(i), pList.fetchone())
                                i = i + 1
                            resultQuery.mainloop()
                        else:
                            tkinter.messagebox.showinfo('Query Success',
                                                        'Success however, no result!')
                    except(sqlite3.OperationalError):
                        tkinter.messagebox.showerror('Query Error', 'Attention, The query you have entered is not valid!')

        """Below, the custom query frame is being assembled with the necessary parts with the query entry being stored
        in the @customQuery variable."""
        customQueryFrame = Frame(master, width=300, height=200, bg="gray")
        customQueryFrame.pack()
        customQueryFrame.pack_propagate(0)
        customQueryLabel = Label(customQueryFrame, text="Enter a Custom Query: ", bg="gray")
        customQueryLabel.pack(padx=5, pady=10)
        customQuery = StringVar()
        customQueryEntry = Text(customQueryFrame, height=5, width=30, bg="darkgray")
        customQueryEntry.pack()
        queryButton = Button(customQueryFrame, text="Query", bg="gray")
        queryButton.bind("<Button-1>", query)
        master.bind("<Return>", query)
        queryButton.pack(pady=10)

    """The new employee screen allows for only managers to create a new employee in the system, which adds them to the
    database."""
    def newEmployeeScreen(master):

        """Basic return mechanism when escape key is pressed"""
        def Return(event):
            time.sleep(.3)
            newEmployeeFrame.destroy()
            PaintsMain.menuScreen(master)

        master.bind("<Escape>", Return)

        """When the create button is clicked, the values in the entries are retrieved and a query is made to determine
        if the employee is existing or not. If it is not, another query is made and the new employees credentials are
        entered. The phone and start date is preset and entered also."""
        def newEmployee(event):
            newFirstNameValue = str(newFirstName.get())
            newLastNameValue = str(newLastName.get())
            newTitleValue = str(newTitle.get())
            newDepartmentValue = str(newDepartment.get())
            newEmailValue = newFirstNameValue + newLastNameValue + "@paintsrus.com"
            newPhoneValue = "845-001-000" + newDepartmentValue
            cursor.execute('SELECT COUNT(*) FROM Employee')
            newEmployeeNumber = str(int(cursor.fetchall()[0][0]) + 2)
            hireDate = datetime.datetime.today().strftime('%Y-%m-%d')

            if (newFirstNameValue == "" or newLastNameValue == "" or newTitleValue == "" or newDepartmentValue == ""):
                tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You must fill the required fields!')
            else:
                answer = tkinter.messagebox.askquestion('Click Yes to Proceed', 'Are you sure all of the information entered is correct?')
                if (answer == 'yes'):
                    cursor.execute('SELECT * FROM Employee WHERE Emp_Email = "' + newEmailValue + '"')
                    result = cursor.fetchall()
                    if (str(result) != '[]'):
                        answer = tkinter.messagebox.showerror('Existing Employee Error', 'The employee you tried to create is already existing!')
                    else:
                        cursor.execute(
                            'INSERT INTO Employee (Emp_Number, Emp_Fname, Emp_Lname, Emp_Email, Emp_Phone, Emp_Hiredate, Emp_Title, Dept_Number) VALUES '
                            '("' + newEmployeeNumber + '", "' + newFirstNameValue + '", "' + newLastNameValue + '", "' + newEmailValue + '", "' + newPhoneValue + '", "' + hireDate + '", "' + newTitleValue + '", "' + newDepartmentValue + '")')
                        connection.commit()
                        answer = tkinter.messagebox.askquestion('Creation Success', 'New employee was created, would you like to return to the main menu?')
                        if (answer == 'yes'):
                            time.sleep(.3)
                            newEmployeeFrame.destroy()
                            PaintsMain.menuScreen(master)

        """Below, the new employee screen is being assembled with all necessary parts. Each entry is stored in an according
        variable for (First name, last name, title, and department."""
        newEmployeeFrame = Frame(master, width=300, height=200, bg="gray")
        newEmployeeFrame.pack()
        newEmployeeFrame.pack_propagate(0)
        newEmployeeLabel = Label(newEmployeeFrame, text="Enter credentials for the new employee:", bg="gray")
        newFirstNameLabel = Label(newEmployeeFrame, text="First Name:", bg="gray")
        newLastNameLabel = Label(newEmployeeFrame, text="Last Name:", bg="gray")
        newFirstName = StringVar()
        newFirstNameEntry = Entry(newEmployeeFrame, textvariable=newFirstName, bg="darkgray")
        newLastName = StringVar()
        newLastNameEntry = Entry(newEmployeeFrame, textvariable=newLastName, bg="darkgray")
        newTitleLabel = Label(newEmployeeFrame, text="Title:", bg="gray")
        newDepartmentLabel = Label(newEmployeeFrame, text="Department:", bg="gray")
        newTitle = StringVar()
        newTitleEntry = Entry(newEmployeeFrame, textvariable=newTitle, bg="darkgray")
        newDepartment = StringVar()
        newDepartmentEntry = Entry(newEmployeeFrame, textvariable=newDepartment, bg="darkgray")
        newEmployeeButton = Button(newEmployeeFrame, text="Create")
        newEmployeeButton.bind("<Button-1>", newEmployee)
        master.bind("<Return>", newEmployee)
        newEmployeeLabel.grid(row=0, columnspan=2, pady=5)
        newFirstNameLabel.grid(row=1, sticky=E)
        newLastNameLabel.grid(row=2, sticky=E)
        newFirstNameEntry.grid(row=1, column=1)
        newLastNameEntry.grid(row=2, column=1)
        newTitleLabel.grid(row=3, sticky=E)
        newDepartmentLabel.grid(row=4, sticky=E)
        newTitleEntry.grid(row=3, column=1)
        newDepartmentEntry.grid(row=4, column=1)
        newEmployeeButton.grid(row=7, columnspan=2, pady=10)

    """screen for taking orders, which are then transferred into invoices. 
    The screen  is compised of a selection of items and cart."""
    def newOrderScreen(master):
        def Return(event):
            time.sleep(.3)
            cursor.execute("DELETE FROM Prod_Cart")
            connection.commit()
            i = 0
            PaintsMain.currentPayment = 0
            paymentFrame.destroy()
            PaintsMain.menuScreen(master)
        """Used to filter the items in the selection screen, either by SKU, BrandID, or Type"""
        def filter(event):
            print("THIS THING")
            if search.get()=="":
                tkinter.messagebox.showerror('Query Error', 'Attention, The query you have entered is not valid!')
                return
            if variable.get()=="SKU":
                try:
                    print(search.get())
                    cursor.execute('SELECT * FROM Product WHERE Prod_SKU = "' +str(search.get())+ '"')
                    pList=cursor.fetchall()
                    print(len(pList))
                    if len(pList)>0:
                        while productList.size() > 0:
                            print("THIS THINGy")
                            productList.delete(0)
                        i = 0
                        while i < len(pList):
                            productList.insert(int(i), pList[i])
                            i = i + 1
                except(sqlite3.OperationalError):
                    tkinter.messagebox.showerror('Query Error', 'Attention, The query you have entered is not valid!')
                    return
            if variable.get() == "BrandID":
                try:
                    print(search.get())
                    cursor.execute('SELECT * FROM Product WHERE Brand_ID = "' + str(search.get()) + '"')
                    pList = cursor.fetchall()
                    print(len(pList))
                    if len(pList) > 0:
                        while productList.size() > 0:
                            print("THIS THINGy")
                            productList.delete(0)
                        i = 0
                        while i < len(pList):
                            productList.insert(int(i), pList[i])
                            i = i + 1
                except(sqlite3.OperationalError):
                    tkinter.messagebox.showerror('Query Error', 'Attention, The query you have entered is not valid!')
                    return
            if variable.get() == "Type":
                try:
                    print(search.get())
                    cursor.execute('SELECT * FROM Product WHERE Prod_Type = "' + str(search.get()) + '"')
                    pList = cursor.fetchall()
                    print(len(pList))
                    if len(pList) > 0:
                        while productList.size() > 0:
                            print("THIS THINGy")
                            productList.delete(0)
                        i = 0
                        while i < len(pList):
                            productList.insert(int(i), pList[i])
                            i = i + 1
                except(sqlite3.OperationalError):
                    tkinter.messagebox.showerror('Query Error', 'Attention, The query you have entered is not valid!')
                    return
        """When remove from cart button is pressed the selected item gets removed and placed back into the selection screen"""
        def removeFromCart(event):
            search = cart.get(cart.curselection())
            mylist = str(search).split("'")
            print(mylist)
            checker = mylist[1]
            print(checker)
            price = cursor.execute('SELECT Prod_Price FROM Product WHERE Prod_SKU = "' + str(checker) + '"').fetchall()
            qty = cursor.execute('SELECT Qty FROM Prod_Cart WHERE Prod_SKU = "' + str(checker) + '"').fetchall()
            productList.insert(0, search)
            cart.delete((cart.curselection())[0])
            prodPrice = int(price[0][0]) * int(qty[0][0])
            PaintsMain.currentPayment = PaintsMain.currentPayment - prodPrice
            v.set(PaintsMain.currentPayment)
            cursor.execute('DELETE FROM Prod_Cart WHERE Prod_SKU ="' + str(checker) + '"')
            connection.commit()
        """Takes the current selection, selected qty, and places it into the cart"""
        def addToCart(event):
            search=productList.get(productList.curselection())
            mylist = str(search).split("'")
            print(mylist)
            checker = mylist[1]
            print(checker)
            price=cursor.execute('SELECT Prod_Price FROM Product WHERE Prod_SKU = "' + str(checker) + '"').fetchall()
            qty=int(qtyEntry.get())
            if isinstance( qty, int):
                cart.insert(0, search)
                productList.delete((productList.curselection())[0])
                prodPrice=int(price[0][0])*int(qty)
                print(prodPrice)
                PaintsMain.currentPayment=PaintsMain.currentPayment+prodPrice
                v.set(PaintsMain.currentPayment)
                cursor.execute('INSERT INTO Prod_Cart (Prod_SKU, Qty) VALUES ("' + checker + '", "' + str(qty) + '")')
                connection.commit()
        """Final step in making an order, takes items in the cart and creates invoice lines for each. Returns to main menu when complete"""
        def makePayment(event):
            answer = tkinter.messagebox.askquestion('Click Yes to Proceed','Confirm order')
            if answer=='no':
                return
            pList = cursor.execute('SELECT Prod_SKU FROM Prod_Cart').fetchall()
            i = 0
            print(pList)
            #pList.__sizeof__()
            Invoice_ID=len(cursor.execute('SELECT Inv_Number FROM Invoice').fetchall())
            Invoice_ID=int(Invoice_ID)+1
            Line_Num=0
            print("Invoice_ID")
            print(Invoice_ID)
            while i < len(pList):
                skuList=pList
                sku=str(skuList[i])
                sku = str(skuList[i]).split("'")
                print("SKU")
                print(sku)
                print("SKU")
                print(sku[1])
                qty=cursor.execute('SELECT Qty FROM Prod_Cart WHERE Prod_SKU="'+ str(sku[1]) + '"').fetchone()
                print(str(qty))
                print(str(qty).split("(")[1].split(",)"))
                print(str(qty).split("(")[1].split(",)")[0])
                qty=str(qty).split("(")[1].split(",)")[0]
                size=cursor.execute('SELECT Prod_SKU FROM Line')
                cursor.execute('INSERT INTO Line (Inv_Number, Line_Number, Prod_SKU, Line_Quantity) VALUES ("' + str(Invoice_ID) + '", "' + str(Line_Num) + '", "' + str(sku[1]) + '", "' + str(qty) + '")')
                i = i + 1
                Line_Num=Line_Num+1
                connection.commit()
            PaintsMain.currentPayment = 0
            cursor.execute('DELETE FROM Prod_Cart')
            connection.commit()
            PaintsMain.currentPayment = 0
            cursor.execute('INSERT INTO Invoice (Inv_Number, Cust_Code, Inv_Date, Inv_Total, Inv_Terms, Pay_Made, Emp_Number) VALUES ("' + str(Invoice_ID) + '", "' + str(PaintsMain.currentCustomer) + '", "' + str(datetime.datetime.today().strftime('%Y-%m-%d')) + '", "' + str(PaintsMain.currentPayment) + '", "Norm", "False" , "' + str(PaintsMain.currentEmployee) + '")')
            connection.commit()
            tkinter.messagebox.showinfo('Order made!', 'Order made, Return to menu')
            Return(master)
        """Helps find what invoice numbers habe been used"""
        def getInvoiceNum():
            check_InvNum=cursor.execute('SELECT Inv_Number FROM Invoice')
            i=0
            j=0
            while i != check_InvNum.arraysize:
                j = j + 1
                if j == check_InvNum.fetchone():
                    check_InvNum = cursor.execute('SELECT Inv_Number FROM Invoice')
                    i=0
                return j
        """Sets the size and establishes the components"""
        master.geometry("500x700")
        paymentFrame = Frame(master, highlightbackground="red", highlightcolor="red",highlightthickness=1, width=500, height=500)
        paymentFrame.pack()
        cBalanceLabel = Label(paymentFrame, text="Customer:"+str(PaintsMain.currentCustomer))
        cartLabel= Label(paymentFrame, text="Cart:")
        qtyLabel = Label(paymentFrame, text ="Qty:")
        qty=0
        qtyEntry = Entry(paymentFrame, textvariable=qty, width=10, bg="darkgray")
        currentBalance = StringVar()
        queryLabel = Label(paymentFrame, text="Search")
        productList = Listbox(paymentFrame, bg="darkgray")
        pList=cursor.execute('SELECT * FROM Product')
        i=0
        pList.__sizeof__()
        while i<pList.__sizeof__():
            productList.insert(int(i),pList.fetchone())
            i=i+1
        cart = Listbox(paymentFrame, bg="darkgray")
        productList.grid(row=2, sticky=W)
        cartLabel.grid(row=5, sticky=W)
        cart.grid(row=6, sticky=W)
        cBalance = Label(paymentFrame, textvariable=currentBalance)
        payment = StringVar()
        paymentEntry = Entry(paymentFrame, textvariable=payment, width=10, bg="darkgray")
        paymentDateLabel = Label(paymentFrame, text="Payment Date:")
        currentDate = datetime.datetime.today().strftime('%Y-%m-%d')
        paymentDate = Label(paymentFrame, text=str(currentDate))
        addToCartButton = Button(paymentFrame, text="Add to cart", bg="gray")
        addToCartButton.bind("<Button-1>", addToCart)
        removeFromCartButton = Button(paymentFrame, text="Remove", bg="gray")
        removeFromCartButton.bind("<Button-1>", removeFromCart)
        master.bind("<Return>", removeFromCart)
        makePaymentButton = Button(paymentFrame, text="Make Payment", bg="gray")
        makePaymentButton.bind("<Button-1>", makePayment)
        master.bind("<Return>", makePayment)
        paymentLabel = Label(paymentFrame, text="Payment: ")
        PaintsMain.total=0
        v=StringVar()
        v.set(PaintsMain.currentPayment)
        variable=StringVar(master)
        variable.set("SKU")
        options=OptionMenu(paymentFrame,variable,"SKU","BrandID","Type")
        options.grid(row=0, sticky=W)
        filterButton = Button(paymentFrame, text="Filter")
        filterButton.grid(row=1,sticky=W)
        filterButton.bind("<Button-1>", filter)
        search=StringVar()
        filterEntry = Entry(paymentFrame, textvariable=search, width=10, bg="darkgray")
        filterEntry.grid(row=0,sticky=E)
        paymentTotalLabel = Label(paymentFrame, textvariable=v, bg="gray")
        addToCartButton.grid(row=4, sticky=W)
        removeFromCartButton.grid(row=4, sticky=E)
        qtyLabel.grid(row=3, sticky=W)
        qtyEntry.grid(row=3, sticky=E)
        cBalanceLabel.grid(row=7, sticky=W)
        cBalance.grid(row=8, sticky=E)
        paymentLabel.grid(row=9, sticky=W)
        paymentTotalLabel.grid(row=10, sticky=E)
        paymentDateLabel.grid(row=11, sticky=W)
        paymentDate.grid(row=12, sticky=E)
        #queryLabel.grid(row=0, sticky=W)
        makePaymentButton.grid(row=13, padx=5, pady=15)
        returnButton = Button(paymentFrame, text="Return")
        returnButton.bind("<Button-1>", Return)
        returnButton.grid(row=13, column=1)
        master.bind("<Escape>", Return)
    """This screen allows employees to search an invoice by number, customer, or employee and has it displayed."""
    def lookupInvoiceScreen(master):
        """Basic return mechanism when escape key is pressed"""
        def Return(event):
            time.sleep(.3)
            lookupInvoiceFrame.destroy()
            PaintsMain.menuScreen(master)

        master.bind("<Escape>", Return)

        """When the lookup invoice button is clicked the value from the field is retrieved and a query is made to the
        invoice table to see if it exists. If it doesnt exist, an error appears, if it does, the generate invoice method
        is called. it does this for whatever selected search method is selected"""
        def searchInvoice(event):
            if(variable.get()=="ID"):
                idValue = str(invoiceID.get())
                if(idValue == ""):
                 tkinter.messagebox.showerror('Blank Field(s) Error', 'Attention, You must fill the required fields!')
                else:
                    if (idValue != ""):
                        cursor.execute('SELECT * FROM Invoice WHERE Inv_Number = "' + idValue + '"')
                        result = cursor.fetchall()
                    if (str(result) == "[]"):
                        tkinter.messagebox.showerror('Incorrect ID', 'Attention, The invoice you\'ve entered was not found!')
                    else:
                        generateInvoice(0,result)
            if (variable.get() == "Customer"):
                idValue = str(invoiceID.get())
                if (idValue == ""):
                    tkinter.messagebox.showerror('Blank Field(s) Error',
                                                 'Attention, You must fill the required fields!')
                else:
                    if (idValue != ""):
                        cursor.execute('SELECT * FROM Invoice WHERE Cust_Code = "' + idValue + '"')
                        result = cursor.fetchall()
                    if (str(result) == "[]"):
                        tkinter.messagebox.showerror('Incorrect ID',
                                                     'Attention, The invoice you\'ve entered was not found!')
                    else:
                        generateInvoice(0,result)
            if (variable.get() == "Employee"):
                idValue = str(invoiceID.get())
                if (idValue == ""):
                    tkinter.messagebox.showerror('Blank Field(s) Error',
                                                 'Attention, You must fill the required fields!')
                else:
                    if (idValue != ""):
                        cursor.execute('SELECT * FROM Invoice WHERE Emp_Number = "' + idValue + '"')
                        result = cursor.fetchall()
                    if (str(result) == "[]"):
                        tkinter.messagebox.showerror('Incorrect ID',
                                                     'Attention, The invoice you\'ve entered was not found!')
                    else:
                            generateInvoice(0,result)
        """used as event that transfers to generateInvoice"""
        def generate(event):
            PaintsMain.g=PaintsMain.g+1
            generateInvoice(PaintsMain.g, PaintsMain.r)

        """When an invoice is found, this method uses the invoicew number to find all relating records from the line table.
        The results are then displayed on a popup screen in a list along with the customer code, invoice number, and 
        invoice total for the current invoice."""
        def generateInvoice(g,r):
            PaintsMain.g=g
            PaintsMain.r=r
            currentInvoice = Tk()
            currentInvoice.title('Invoice ' + str(r[g][0]))
            currentInvoiceFrame = Frame(currentInvoice, bg="gray")
            currentInvoiceFrame.pack(fill=BOTH, expand=YES)
            #invLabel = Label(currentInvoiceFrame, text="Inv #: " + str(r[0][0]), bg="gray", highlightbackground="red", highlightcolor="red", highlightthickness=1)
            custLabel = Label(currentInvoiceFrame, text="Cust Code: " + str(r[g][1]), bg="gray", highlightbackground="red", highlightcolor="red", highlightthickness=1)
            empLabel = Label(currentInvoiceFrame, text="Emp #: " + str(r[g][6]), bg="gray", highlightbackground="red", highlightcolor="red", highlightthickness=1)
            totalLabel = Label(currentInvoiceFrame, text="Total: $" + str(r[g][3]), bg="gray", highlightbackground="red", highlightcolor="red", highlightthickness=1)
            #invLabel.grid(row=0, column=0)
            nextInvButton=Button(currentInvoiceFrame, text="Next Invoice")
            custLabel.grid(row=0, column=0)
            empLabel.grid(row=0, column=1)
            totalLabel.grid(row=0, column=2)

            cursor.execute('SELECT COUNT(*) FROM Line WHERE Inv_Number = "' + str(r[0]) + '"')
            rownum = cursor.fetchall()
            iList = cursor.execute('SELECT * FROM Line WHERE Inv_Number = "' + str(r[0]) + '"')
            lineList = Listbox(currentInvoiceFrame, height=rownum, bg="darkgray")
            i = 0
            while i < iList.__sizeof__():
                curr = iList.fetchone()
                if(curr != None):
                    lineList.insert(int(i), "{:<20}{:<5}".format(str(curr[2]), "x" + str(curr[3])))
                i = i + 1

            lineList.grid(row=1, columnspan=3, pady=5)
            print("test1")
            if len(r)-1>g:
                print("test")
                nextInvButton.grid(row=3, column=0)
                nextInvButton.bind("<Button-1>", generate)

            #currentInvoice.mainloop()


        variable = StringVar(master)
        variable.set("ID")

        """Below, the lookup invoice frame is being assembled with the necessary parts. The invoice id is stored in the 
                @invoiceID variable."""
        lookupInvoiceFrame = Frame(master, width=300, height=200, bg="gray")
        lookupInvoiceFrame.pack(pady=25)
        lookupInvoiceFrame.pack_propagate(0)
        searchOptions = OptionMenu(lookupInvoiceFrame, variable, "ID", "Customer", "Employee")
        lookupLabel = Label(lookupInvoiceFrame, text="Lookup an invoice by :", bg="gray")
        #invoiceIdLabel = Label(lookupInvoiceFrame, text="Invoice Number:", bg="gray")
        invoiceID = StringVar()
        invoiceIdEntry = Entry(lookupInvoiceFrame, textvariable=invoiceID, bg="darkgray")

        searchButton = Button(lookupInvoiceFrame, text="Search")
        searchButton.bind("<Button-1>", searchInvoice)
        master.bind("<Return>", searchInvoice)
        lookupLabel.grid(row=0, columnspan=2, pady=10)
        #invoiceIdLabel.grid(row=1, sticky=E)
        invoiceIdEntry.grid(row=1, column=1)
        searchButton.grid(row=2, columnspan=2, pady=10)
        searchOptions.grid(row=1, sticky=E)
#Creating window and calling PaintsMain class which initialized login window
root = Tk()
root.title('Paints R Us')
root.geometry("300x200")
root.config(background="gray")
b = PaintsMain(root)
root.mainloop()
